---
layout: api.html
---


<h1>Seneca API</h1>


<div class="row">

<%

var require = this.process.mainModule.require
var fs = require('fs')


/*
Field names:
  n: name,
  c: code,
  d: description,
  t: type or type list
  f: default value
  o: is optional
  p: function parameters, keyed by name
  g: function signature - list of parameter names
  m: full description with more details
  x: code example
  y: code example explanation
*/

var items_top = [{
  n: 'Instance',
  d: 'Creating and using the Seneca instance object.',
  c: 'instance',
}, {
  n: 'Options',
  d: 'The configuration options for Seneca.',
  c: 'options',
}, {
  n: 'Methods',
  d: 'The public methods of the Seneca instance.',
  c: 'methods',
}, {
  n: 'Plugins',
  d: 'The plugin interface.',
  c: 'plugins',
}, {
  n: 'Messages',
  d: 'The message metadata properties.',
  c: 'messages',
}, {
  n: 'Modifiers',
  d: 'Message modifiers that control message processing.',
  c: 'modifiers',
}, {
  n: 'Utilities',
  d: 'Utility functions and formats.',
  c: 'utilities',
}]


var items_instance = [{
   n: 'id',
   d: 'The unique identifier string of this Seneca instance.'

}, {
   n: 'tag',
   d: 'The tag string of this Seneca instance, defined by the <a href="#option-tag">tag</a> option.'

}, {
   n: 'start_time',
   d: 'The start time (in local milliseconds) of this Seneca instance.'

}, {
   n: 'version',
   d: 'The current version of Seneca.'

}, {
   n: 'util',
   d: 'A namespace object for the <a href="#utilities">utility</a> functions.'

}]


var items_options = [{
   n: 'tag',
   t: [{t:'String', f:'"-"'}],
   d: 'Tag the Seneca instance with a short code that will be added to the instance identifier. Useful for tracing and debugging.',

}, {
   n: 'timeout',
   t: [{t:'Integer', f:'22222'}],
   d: 'The global timeout for actions. Once this timeout is exceeded, the sender of the message receives an error response via the callback of the <a href="#method-act">act</a> method.'

}, {
   n: 'plugin',
   t: [{t:'Object', f:'{...}'}],
   d: 'Namespace for plugin options. Once loaded, plugin options are stored here for ease of shared access.'

}, {
   n: 'test',
   t: [{t:'Boolean', f:'false'}],
   d: 'When <code>true</code> Seneca is in unit testing mode. To enter enter this mode, use the <a href="#method-test">test</a> method.'

}, {
   n: 'debug',
   t: [{t:'Object', f:'{...}'}],
   d: 'Namespace object for options related to debugging. They should all be <code>false</code> for production deployments.'

}, {
   n: 'strict',
   t: [{t:'Object', f:'{...}'}],
   d: 'Namespace object for options related to strict behaviors. Mostly this is for backwards compatibility with older versions of Seneca that were not as strict.'
}]



var items_methods = [{
  n: 'Seneca',
  c: 'seneca-constructor',
  r: 'seneca',
  g: [['options']],
  p: {options: {t:['Object', 'String'], o:true}},
  d: 'Create an instance of the Seneca object.'

}, {
  n: 'add',
  g: [['pattern', 'action'], ['pattern', 'sub_pattern', 'action']],
  p: { 
    pattern: {
      t:['jsonic', 'Object'], 
      d:'The pattern that inbound messages must match to trigger this action.'
    },
    sub_pattern: {
      t:['Object'], 
      o:true, 
      d:'A convenience parameter that is merged into the <i>pattern</i> parameter with lower precedence.'
    },
    action: {
      t:['Function'], 
      d:'The function that executes the action for this pattern.'
    } 
  },
  d: '<p>Add an <i>action</i> function to be called when inbound messages match the <i>pattern</i>.</p>'
}, {
  n: 'act',
  g: [['message', 'callback'], ['message', 'sub_message', 'callback']],
  p: { 
    message: {
      t:['jsonic', 'Object'], 
      d:'The pattern that inbound messages must match to trigger this action.'
    },
    sub_message: {
      t:['Object'], 
      o:true, 
      d:'A convenience parameter that is merged into the <i>message</i> parameter with lower precedence.'
    },
    callback: {
      t:['Function'], 
      o:true, 
      d:'The function that executes the action for this pattern.'
    } 
  },
  d: 'Send a <i>message</i> and receive a response via the <i>callback</i>. If there is no <i>callback</i> the message is asynchronous.'

}, {
  n: 'use',
  g: [['plugin', 'options']],
  p: {
    plugin: {
      t:['String', 'Function', 'Object'],
      d:'The plugin definition is either: the name of a module; a file path; an initialization function; or a metadata object.'
    },
    options: {
      t:['Object'],
      o:true,
      d:"The options that control the plugin's behavior. These are placed under the property path <code>plugin.&lt;plugin-name&gt;</code> in the Seneca <a href='#option-plugin'>options</a> object."
    }
  },
  d:'Load a plugin and use the action patterns that it defines. <a href="/docs/tutorials/how-to-write-a-plugin.html">Plugin initialization</a> must complete before further actions are executed.'

}, {
  n: 'listen',
  g: [['port', 'host'], ['object']],
  p: {
    port: {t:['Integer', 'String'], o:true},
    host: {t:['String'], o:true},
  },
  d: 'Listen for inbound messages.',
}, {
  n: 'client',
  g: [['port', 'host'], ['object']],
  p: {
    port: {t:['Integer', 'String'], o:true},
    host: {t:['String'], o:true},
  },
  d: 'Send outbound messages.',

}, {
  n: 'ready',
  g: [['callback']],
  p: {
    callback: {t:['Function']},
  },
  d: 'Wait for plugins to initialize fully.'

}, {
  n: 'options',
  g: [['object', 'chain']],
  p: {
    object: {t:['Object'], o:true},
    chain: {t:['Boolean'], o:true},
  },
  d: 'Get and set options.'

}, {
  n: 'log',
  g: [['object']],
  p: {
    object: {t:['Object']},
  },
  d: 'Create log entries.'

}, {
  n: 'test',
  g: [['callback', 'logspec']],
  p: {
    callback: {t:['Function']},
    logspec: {t:['Object', 'String']},
  },
  d: 'Enter <a href="/docs/tutorials/unit-testing.html">unit testing</a> mode.'

}, {
  n: 'find',
  g: [['pattern']],
  p: {
    pattern: {t:['Object', 'String']},
  },
  d: 'Find the unique action metadata for the given pattern. Returns null if the pattern has not been <a href="#method-add">added<a/>.'

}, {
  n: 'has',
  g: [['pattern']],
  p: {
    pattern: {t:['Object', 'String']},
  },
  d: 'Returns <code>true</code> if the given pattern has been <a href="#method-add">added<a/>.'

}, {
  n: 'list',
  g: [['pattern']],
  p: {
    pattern: {t:['Object', 'String']},
  },
  d: 'List all added patterns that partially match the given pattern.'
}, {
  n: 'gate',
  g: [[]],
  d: 'Enter gated mode, where all actions must complete before new actions can start. This is used to give plugin initialization a deterministic order.'

}, {
  n: 'ungate',
  g: [[]],
  d: 'Exit gated mode. Actions now execute immediately and do not wait for each other. This is the default mode.'
}]



var items_messages = [{
   n: 'id',
   d: 'The full message identifier, which concatenates the message and correlation identifiers.'

}, {
   n: 'sync',
   d: 'When <code>true</code> the message is synchronous, otherwise the message is asynchronous.'

}]


var items_modifiers = [{
  n: 'default$',
  r: 'default',
  d: 'If the pattern is not found, provide a default response.'

}, {
  n: 'timeout$',
  r: 'timeout',
  d: 'Specify a local timeout in milliseconds for this particular action execution.'

}, {
  n: 'gate$',
  r: 'gate',
  d: 'This action is gated and must complete before any other actions can start.'

}, {
  n: 'fatal$',
  r: 'fatal',
  d: 'Any errors in this action, or sub actions, will be fatal. Used for plugin definition and initialization.',
  m:'<p>When this modifier is <code>true</code>, Seneca will terminate the Node.js process if an error occurs inside an action, or any actions that that action calls. This prevents a Seneca microservice from continuing to run when a plugin has failed to start up correctly.</p><p>For example, if an entity plugin cannot connect to the database, the microservice is not functional, and should die.</p><p>On death, Seneca will print out a detailed error message including summary information about the current process.</p>'

}]


var items_plugins = [{
  n: 'init',
  d: 'The plugin initialization action. Executed in order deterministically with other plugin initialization actions.'
}]


var items_utilities = [{
  n: 'clean',
  g: [['message']],
  p: {
    message: {
      t: 'Object',
      d: 'Message object to clean.'
    }
  },
  d: 'Clean messages by removing metadata and directives. All (and only) top level property names containing a <code>$</code> character are removed.'
  
}, {
  n: 'deepextend',
  g: [['object...']],
  p: {
    'object...': {
      t: 'Object',
      d: 'Any number of parameters that are Objects.'
    }
  },
  d: 'Combine the listed objects into one new object, overwriting properties from right to left.'
}, {
  n: 'pattern',
  g: [['object']],
  p: {
    'object': {
      t: 'Object',
      d: 'An object defining a pattern.'
    }
  },
  d: 'Convert a pattern object into a normalized jsonic String.',

}]



var more = {}
var example = {}
var sub = {}

Q(items_top, function(i) {
  var subitems = eval('Q(items_'+i.c+')')
  subitems.forEach(function (si,I) {
    si.c = (si.c || si.n).replace(/\$/g, '')
  })

  more[i.c] = eval('more_'+i.c+'()')
  example[i.c] = eval('example_'+i.c+'()')
  sub[i.c] = eval('sub_'+i.c+'()')

  subitems.forEach(function (si,I) {
    si.m = si.m || QQ(more[i.c])[si.c]
    si.x = si.x || QQ(example[i.c])[si.c]
    si.s = si.s || QQ(sub[i.c])[si.c]
  })
})




// Omit separator after last item.
function S(I, A, sep) {
   return I === A.length-1 ? '' : sep
}

// Null check arrays and objects with
// optional convenience iterator over elements or keys.
function Q(x,iter) {
  var isobj = 0
  var xa = null == x ? [] : Array.isArray(x) ? x : 'object' === typeof x ? (isobj=1,Object.keys(x)) : [x]
  if (iter) xa.forEach(iter)
  return isobj ? x : xa
}

function QQ(x) {
  return null == x ? {} : x
}


// Conditional print.
function P(bool, x) {
  return !!bool ? x : ''
}

function sort_items (i) {
   i.sort(function (a, b) {
     return a.n < b.n ? -1 : a.n > b.n ? 1 : 0
   })
   return i
} 

function X(name) {
  try {
    return fs.readFileSync('./code/api-examples/'+name).toString()
  }
  catch (e) {
    console.log(e.message)
    return ''
  }
}

%>


<div class="col-xs-12"><div class="box" style="margin-bottom:2rem">

The API documentation is organized alphabetically into topics, subtopics and entries. Each entry contains a code example to show API usage.

</div></div>


<!-- Top level descriptions -->

<% sort_items(items_top).forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><a href="#<%=i.r||i.n.toLowerCase()%>"><div class="api-box">
<h4><%=i.n%></h4>
<p class="top"><%-i.d%></p>
</div></a></div>
<% }) %>

</div>




<!-- Short instance descriptions -->

<div class="cf">
<h2 class="api-subhead">Instance</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% sort_items(items_instance).forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="instance-<%=i.r||i.n%>">
<h5><b><%=i.n%></b></h5>
<p><%-i.d%></p>
</div></div>
<% }) %>
</div>




<!-- Short options descriptions -->

<div class="cf">
<h2 class="api-subhead">Options</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% sort_items(items_options).forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="option-<%=i.r||i.n%>">
<h5><b><%=i.n%></b> <u><%=i.t[0].t%></u> <u><%=i.t[0].f%></u></h5>
<p><%-i.d%></p>
</div></div>
<% }) %>
</div>




<!-- Short method descriptions -->

<div class="cf">
<h2 class="api-subhead">Methods</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% sort_items(items_methods).forEach(function (i) { var g = Q(i.g) %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="method-<%=i.r||i.n%>">
<h5>
<b><%=i.n%></b>
<% Q(g[0], function (p0) { %>
<i><%=p0%><%=P(Q(Q(i.p)[p0]).o,'?')%></i>
<% }) %>
</h5>
<p><%-i.d%></p>
<ul>
<% Q(g[0], function (pn) { var p = Q(Q(i.p)[pn]) %>
<li><i><%=pn%></i> :

<% Q(p.t, function (t,I,A) { %>
<u><%=t%></u> <%=S(I,A,'|')%>
<% }) %>

</li>
<% }) %>
<ul>
</div></div>
<% }) %>

</div>




<!-- Short messages descriptions -->

<div class="cf">
<h2 class="api-subhead">Messages</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% sort_items(items_messages).forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="message-<%=i.n%>">
<h5><b><%=i.n%></b></h5>
<p><%-i.d%></p>
</div></div>
<% }) %>
</div>




<!-- Short modifier descriptions -->

<div class="cf">
<h2 class="api-subhead">Modifiers</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% sort_items(items_modifiers).forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="modifier-<%=i.r||i.n%>">
<h5><b><%=i.n%></b></h5>
<p><%-i.d%></p>
</div></div>
<% }) %>
</div>




<!-- Short plugin descriptions -->

<div class="cf">
<h2 class="api-subhead">Plugins</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% sort_items(items_plugins).forEach(function (i) { %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="plugin-<%=i.n%>">
<h5><b><%=i.n%></b></h5>
<p><%-i.d%></p>
</div></div>
<% }) %>
</div>





<!-- Short utilities descriptions -->

<div class="cf">
<h2 class="api-subhead">Utilities</h2>
<a class="api-back" href="#seneca-api">up</a>
</div>
<div class="row">
<% sort_items(items_utilities).forEach(function (i) { var g = Q(i.g) %>
<div class="col-xs-12 col-sm-4"><div class="api-box" data-api-box-ref="utility-<%=i.r||i.n%>">
<h5>
<b><%=i.n%></b>
<% Q(g[0], function (p0) { %>
<i><%=p0%><%=P(Q(i.p[p0]).o,'?')%></i>
<% }) %>
</h5>
<p><%-i.d%></p>
<ul>
<% Q(g[0], function (pn) { var p = i.p[pn] %>
<li><i><%=pn%></i> :

<% Q(p.t, function (t,I,A) { %>
<u><%=t%></u> <%=S(I,A,'|')%>
<% }) %>

</li>
<% }) %>
<ul>
</div></div>
<% }) %>

</div>




<div class="api-vs"></div>
<!-- Full instance descriptions -->

<% sort_items(items_instance).forEach(function (i) { %>
<div class="cf">
<h2 class="api-subhead">Instance: <b><%=i.n%></b></h2>
<a class="api-back" href="#instance">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<h4>Description</h4>
<p class="desc"><%-i.d%></p>

<% if(i.m) { %>
<h4>Details</h4>
<%-i.m%>
<% } %>

<% if(i.x) { %>
<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>
<% } %>

</div></div>
<% }) %>




<div class="api-vs"></div>
<!-- Full option descriptions -->

<% sort_items(items_options).forEach(function (i) { %>
<div class="cf">
<h2 class="api-subhead">Option: <b><%=i.n%></b></h2>
<a class="api-back" href="#options">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<ul>
<% i.t.forEach(function (t) { %>
<li><u><%=t.t%></u>, <u><%=t.f%></u></li>
<% }) %>
</ul>

<h4>Description</h4>
<p class="desc"><%-i.d%></p>

<% if(i.s) { %>
<h4>Sub-options</h4>
<table>
<% Q(i.s, function (s) { %>
<tr>
  <td><i><%=s.n%></i></td>
  <td>
<% Q(s.t, function(t,I,A) { %>
    <u><%=t%></u><%=S(I,A,'|')%>
<% }) %>
  </td>
  <td title="Default value."><u><%=s.f%></u></td>
  <td><%-s.d%></td>
</tr>
<% }) %>
</table>
<% } %>

<% if(i.m) { %>
<h4>Details</h4>
<%-i.m%>
<% } %>

<% if(i.x) { %>
<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>
<% } %>

</div></div>
<% }) %>




<div class="api-vs"></div>
<!-- Full method descriptions -->

<% items_methods.forEach(function (i) { %>
<div class="cf">
  <h2 class="api-subhead">Method: <b><%=i.n%></b></h2>
  <a class="api-back" href="#methods">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<p><%-i.d%></p>

<h4>Signatures</h4>
<ul>
<% Q(i.g, function (g) { %>
<li><b><%=i.n%></b> &nbsp;&nbsp;
<% Q(g, function (pn,I,A) { %>
<i><%=pn%></i><%=S(I,A,',')%> 
<% }) %>
</li>
<% }) %>
</ul>

<h4>Parameters</h4>
<table>
<% Q(i.p, function (pn) { var p = i.p[pn] %>
<tr>
  <td><i><%=pn%></i></td>
  <td>
<% Q(p.t, function(t,I,A) { %>
    <u><%=t%></u><%=S(I,A,'|')%>
<% }) %>
  <small><%=P(Q(i.p[pn]).o,'(optional)')%></small>
  </td>
  <td><%-p.d%></td>
</tr>
<% }) %>
</table>

<% if (i.m) { %>
<h4>Details</h4>
<p class="desc"><%-i.m%></p>
<% } %>

<% if (i.x) { %>
<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>
<% } %>

</div></div>
<% }) %>




<!-- Full plugin descriptions -->
<div class="api-vs"></div>

<% sort_items(items_plugins).forEach(function (i) { %>
<div class="cf">
  <h2 class="api-subhead">Plugin: <b><%=i.n%></b></h2>
  <a class="api-back" href="#plugins">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<h4>Description</h4>
<p class="desc"><%-i.d%></p>

<% if(i.m) { %>
<h4>Details</h4>
<%-i.m%>
<% } %>

<% if(i.x) { %>
<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>
<% } %>

</div></div>
<% }) %>




<!-- Full messages descriptions -->
<div class="api-vs"></div>

<% sort_items(items_messages).forEach(function (i) { %>
<div class="cf">
<h2 class="api-subhead">Message: <b><%=i.n%></b></h2>
<a class="api-back" href="#messages">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<h4>Description</h4>
<p class="desc"><%-i.d%></p>

<% if(i.m) { %>
<h4>Details</h4>
<%-i.m%>
<% } %>

<% if(i.x) { %>
<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>
<% } %>

</div></div>
<% }) %>



<!-- Full modifiers descriptions -->
<div class="api-vs"></div>

<% sort_items(items_modifiers).forEach(function (i) { %>
<div class="cf">
<h2 class="api-subhead">Modifier: <b><%=i.n%></b></h2>
<a class="api-back" href="#modifiers">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<h4>Description</h4>
<p class="desc"><%-i.d%></p>

<% if(i.m) { %>
<h4>Details</h4>
<%-i.m%>
<% } %>

<% if(i.x) { %>
<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>
<% } %>

</div></div>
<% }) %>




<div class="api-vs"></div>
<!-- Full utilties descriptions -->

<% items_utilities.forEach(function (i) { %>
<div class="cf">
  <h2 class="api-subhead">Utility: <b><%=i.n%></b></h2>
  <a class="api-back" href="#utilities">up</a>
</div>

<div class="row"><div class="col-xs-12 api-desc">

<p><%-i.d%></p>

<h4>Signatures</h4>
<ul>
<% Q(i.g, function (g) { %>
<li><b><%=i.n%></b> &nbsp;&nbsp;
<% Q(g, function (pn,I,A) { %>
<i><%=pn%></i><%=S(I,A,',')%> 
<% }) %>
</li>
<% }) %>
</ul>

<h4>Parameters</h4>
<table>
<% Q(i.p, function (pn) { var p = i.p[pn] %>
<tr>
  <td><i><%=pn%></i></td>
  <td>
<% Q(p.t, function(t,I,A) { %>
    <u><%=t%></u><%=S(I,A,'|')%>
<% }) %>
  <small><%=P(Q(i.p[pn]).o,'(optional)')%></small>
  </td>
  <td><%-p.d%></td>
</tr>
<% }) %>
</table>

<% if (i.m) { %>
<h4>Details</h4>
<p class="desc"><%-i.m%></p>
<% } %>

<% if (i.x) { %>
<h4>Example</h4>
<pre><code class="lang-js hljs javascript"><%-i.x.trim()%></code></pre>
<%-i.y%>
<% } %>

</div></div>
<% }) %>





<%
function sub_options () {
  return {
  debug: [
    { n:'deprecation', t:'Boolean', f:'true', 
      d:'Deprecation warnings are logged at the debug level. Should be <code>false</code> in production. You should update your code.' },

    { n:'undead', t:'Boolean', f:'false', 
      d:'When <code>true</code>, fatal errors will not exit the process. Should only be used for debugging, and fatal errors are fatal because they leave Seneca in an indeterminate invalid state.' },
   
  ],

  strict: [
    { n:'result', t:'Boolean', f:'true', 
      d:'The result provided by an action must be an Object or an Array that can be fully serialized to JSON. When <code>false</code> scalar values (Strings, Numbers, etc) are permitted. Use only to keep old code working while you migrate.' },
  ],
  }
}

function more_options () {
  return {
  tag: `
<p>
The <b>tag</b> value is a free form String that is appended to the end of the Seneca identifier. It is not meant to be a unique value. You use it identify groups of microservices.
</p>
<p>
The public member variable <code>Seneca.tag</code> can be used to retrieve the tag value.
</p>
   `
   }   
}




function example_instance () {
  var out = {}
  Q(items_instance, function (i) {
    out[i.c] = X('instance-'+i.c+'.js')
  })
  return out
}

function example_options () {
  var out = {}
  Q(items_options, function (i) {
    out[i.c] = X('option-'+i.c+'.js')
  })
  return out
}

function example_utilities () {
  var out = {}
  Q(items_utilities, function (i) {
    out[i.c] = X('utility-'+i.c+'.js')
  })
  return out
}

function example_messages () {
  var out = {}
  Q(items_messages, function (i) {
    out[i.c] = X('message-'+i.c+'.js')
  })
  return out
}

function example_modifiers () {
  var out = {}
  Q(items_modifiers, function (i) {
    out[i.c] = X('modifier-'+i.c+'.js')
  })
  return out
}

function example_plugins () {
  var out = {}
  Q(items_plugins, function (i) {
    out[i.c] = X('plugin-'+i.c+'.js')
  })
  return out
}

function example_methods() {
  var out = {}
  Q(items_methods, function (i) {
    out[i.c] = X('method-'+i.c+'.js')
  })
  return out
}



function more_instance() {}
function more_messages() {}
function more_methods() {}
function more_modifiers() {}
function more_plugins() {}
function more_utilities() {}

function sub_instance() {}
function sub_messages() {}
function sub_methods() {}
function sub_modifiers() {}
function sub_plugins() {}
function sub_utilities() {}

%>
